/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CampaignFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allCampaigns"
      | "brandCampaigns"
      | "createCampaign"
      | "getAllCampaigns"
      | "getBrandCampaigns"
      | "getCampaignCount"
      | "isCampaign"
      | "isValidCampaign"
      | "pyusdToken"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CampaignCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "allCampaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "brandCampaigns",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBrandCampaigns",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCampaign",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidCampaign",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pyusdToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "allCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "brandCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBrandCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCampaign", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pyusdToken", data: BytesLike): Result;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaign: AddressLike,
    brand: AddressLike,
    startTime: BigNumberish,
    endTime: BigNumberish,
    maxPayoutPerReview: BigNumberish,
    maxParticipants: BigNumberish,
    rulesHash: BytesLike
  ];
  export type OutputTuple = [
    campaign: string,
    brand: string,
    startTime: bigint,
    endTime: bigint,
    maxPayoutPerReview: bigint,
    maxParticipants: bigint,
    rulesHash: string
  ];
  export interface OutputObject {
    campaign: string;
    brand: string;
    startTime: bigint;
    endTime: bigint;
    maxPayoutPerReview: bigint;
    maxParticipants: bigint;
    rulesHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CampaignFactory extends BaseContract {
  connect(runner?: ContractRunner | null): CampaignFactory;
  waitForDeployment(): Promise<this>;

  interface: CampaignFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allCampaigns: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  brandCampaigns: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  createCampaign: TypedContractMethod<
    [
      startTime: BigNumberish,
      endTime: BigNumberish,
      maxPayoutPerReview: BigNumberish,
      maxParticipants: BigNumberish,
      rulesHash: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getAllCampaigns: TypedContractMethod<[], [string[]], "view">;

  getBrandCampaigns: TypedContractMethod<
    [brand: AddressLike],
    [string[]],
    "view"
  >;

  getCampaignCount: TypedContractMethod<[], [bigint], "view">;

  isCampaign: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isValidCampaign: TypedContractMethod<
    [campaign: AddressLike],
    [boolean],
    "view"
  >;

  pyusdToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allCampaigns"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "brandCampaigns"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      startTime: BigNumberish,
      endTime: BigNumberish,
      maxPayoutPerReview: BigNumberish,
      maxParticipants: BigNumberish,
      rulesHash: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllCampaigns"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBrandCampaigns"
  ): TypedContractMethod<[brand: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCampaignCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isCampaign"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidCampaign"
  ): TypedContractMethod<[campaign: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pyusdToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;

  filters: {
    "CampaignCreated(address,address,uint256,uint256,uint256,uint256,bytes32)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
  };
}
