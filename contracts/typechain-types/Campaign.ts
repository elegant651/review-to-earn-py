/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CampaignInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "brand"
      | "depositBudget"
      | "endCampaign"
      | "endTime"
      | "getCampaignInfo"
      | "hasParticipated"
      | "isActive"
      | "maxParticipants"
      | "maxPayoutPerReview"
      | "participantCount"
      | "payReward"
      | "pyusdToken"
      | "remainingBudget"
      | "rulesHash"
      | "startTime"
      | "totalBudget"
      | "totalPaidOut"
      | "userRewards"
      | "withdrawRemainder"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BudgetDeposited"
      | "BudgetWithdrawn"
      | "CampaignEnded"
      | "RewardPaid"
  ): EventFragment;

  encodeFunctionData(functionFragment: "brand", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositBudget",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCampaignInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasParticipated",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPayoutPerReview",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participantCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payReward",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pyusdToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainingBudget",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rulesHash", values?: undefined): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBudget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPaidOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRemainder",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "brand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasParticipated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPayoutPerReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participantCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pyusdToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rulesHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPaidOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRemainder",
    data: BytesLike
  ): Result;
}

export namespace BudgetDepositedEvent {
  export type InputTuple = [amount: BigNumberish, newTotal: BigNumberish];
  export type OutputTuple = [amount: bigint, newTotal: bigint];
  export interface OutputObject {
    amount: bigint;
    newTotal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BudgetWithdrawnEvent {
  export type InputTuple = [brand: AddressLike, amount: BigNumberish];
  export type OutputTuple = [brand: string, amount: bigint];
  export interface OutputObject {
    brand: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignEndedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardPaidEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    score: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, score: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    score: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Campaign extends BaseContract {
  connect(runner?: ContractRunner | null): Campaign;
  waitForDeployment(): Promise<this>;

  interface: CampaignInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  brand: TypedContractMethod<[], [string], "view">;

  depositBudget: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  endCampaign: TypedContractMethod<[], [void], "nonpayable">;

  endTime: TypedContractMethod<[], [bigint], "view">;

  getCampaignInfo: TypedContractMethod<
    [],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        _brand: string;
        _totalBudget: bigint;
        _remainingBudget: bigint;
        _totalPaidOut: bigint;
        _participantCount: bigint;
        _maxParticipants: bigint;
        _startTime: bigint;
        _endTime: bigint;
        _isActive: boolean;
      }
    ],
    "view"
  >;

  hasParticipated: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isActive: TypedContractMethod<[], [boolean], "view">;

  maxParticipants: TypedContractMethod<[], [bigint], "view">;

  maxPayoutPerReview: TypedContractMethod<[], [bigint], "view">;

  participantCount: TypedContractMethod<[], [bigint], "view">;

  payReward: TypedContractMethod<
    [user: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;

  pyusdToken: TypedContractMethod<[], [string], "view">;

  remainingBudget: TypedContractMethod<[], [bigint], "view">;

  rulesHash: TypedContractMethod<[], [string], "view">;

  startTime: TypedContractMethod<[], [bigint], "view">;

  totalBudget: TypedContractMethod<[], [bigint], "view">;

  totalPaidOut: TypedContractMethod<[], [bigint], "view">;

  userRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawRemainder: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "brand"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositBudget"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endCampaign"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCampaignInfo"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        _brand: string;
        _totalBudget: bigint;
        _remainingBudget: bigint;
        _totalPaidOut: bigint;
        _participantCount: bigint;
        _maxParticipants: bigint;
        _startTime: bigint;
        _endTime: bigint;
        _isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasParticipated"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxParticipants"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxPayoutPerReview"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "participantCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "payReward"
  ): TypedContractMethod<
    [user: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pyusdToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "remainingBudget"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rulesHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "startTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBudget"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPaidOut"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawRemainder"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BudgetDeposited"
  ): TypedContractEvent<
    BudgetDepositedEvent.InputTuple,
    BudgetDepositedEvent.OutputTuple,
    BudgetDepositedEvent.OutputObject
  >;
  getEvent(
    key: "BudgetWithdrawn"
  ): TypedContractEvent<
    BudgetWithdrawnEvent.InputTuple,
    BudgetWithdrawnEvent.OutputTuple,
    BudgetWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "CampaignEnded"
  ): TypedContractEvent<
    CampaignEndedEvent.InputTuple,
    CampaignEndedEvent.OutputTuple,
    CampaignEndedEvent.OutputObject
  >;
  getEvent(
    key: "RewardPaid"
  ): TypedContractEvent<
    RewardPaidEvent.InputTuple,
    RewardPaidEvent.OutputTuple,
    RewardPaidEvent.OutputObject
  >;

  filters: {
    "BudgetDeposited(uint256,uint256)": TypedContractEvent<
      BudgetDepositedEvent.InputTuple,
      BudgetDepositedEvent.OutputTuple,
      BudgetDepositedEvent.OutputObject
    >;
    BudgetDeposited: TypedContractEvent<
      BudgetDepositedEvent.InputTuple,
      BudgetDepositedEvent.OutputTuple,
      BudgetDepositedEvent.OutputObject
    >;

    "BudgetWithdrawn(address,uint256)": TypedContractEvent<
      BudgetWithdrawnEvent.InputTuple,
      BudgetWithdrawnEvent.OutputTuple,
      BudgetWithdrawnEvent.OutputObject
    >;
    BudgetWithdrawn: TypedContractEvent<
      BudgetWithdrawnEvent.InputTuple,
      BudgetWithdrawnEvent.OutputTuple,
      BudgetWithdrawnEvent.OutputObject
    >;

    "CampaignEnded()": TypedContractEvent<
      CampaignEndedEvent.InputTuple,
      CampaignEndedEvent.OutputTuple,
      CampaignEndedEvent.OutputObject
    >;
    CampaignEnded: TypedContractEvent<
      CampaignEndedEvent.InputTuple,
      CampaignEndedEvent.OutputTuple,
      CampaignEndedEvent.OutputObject
    >;

    "RewardPaid(address,uint256,uint256)": TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
    RewardPaid: TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
  };
}
